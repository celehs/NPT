// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bs_tree
arma::mat bs_tree(const arma::vec& y);
RcppExport SEXP _NPT_bs_tree(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(bs_tree(y));
    return rcpp_result_gen;
END_RCPP
}
// num_sum
double num_sum(const arma::vec& eta, const arma::vec& y, const arma::vec& u, const arma::vec& v, const arma::mat& TREE);
RcppExport SEXP _NPT_num_sum(SEXP etaSEXP, SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP TREESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TREE(TREESEXP);
    rcpp_result_gen = Rcpp::wrap(num_sum(eta, y, u, v, TREE));
    return rcpp_result_gen;
END_RCPP
}
// den_sum
double den_sum(const arma::vec& y, const arma::vec& u, const arma::vec& v);
RcppExport SEXP _NPT_den_sum(SEXP ySEXP, SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(den_sum(y, u, v));
    return rcpp_result_gen;
END_RCPP
}
// obj_fun
double obj_fun(const arma::rowvec& coef, const arma::mat& Z, const arma::vec& y, const arma::vec& u, const arma::vec& v, bool tree);
RcppExport SEXP _NPT_obj_fun(SEXP coefSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(obj_fun(coef, Z, y, u, v, tree));
    return rcpp_result_gen;
END_RCPP
}
// rowvec_norm
arma::rowvec rowvec_norm(const arma::rowvec& x, int p);
RcppExport SEXP _NPT_rowvec_norm(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rowvec_norm(x, p));
    return rcpp_result_gen;
END_RCPP
}
// obj_try
double obj_try(arma::mat& M, const arma::uvec& idx, int ndim, int p, double fac, const arma::mat& Z, const arma::vec& y, const arma::vec& u, const arma::vec& v, bool tree);
RcppExport SEXP _NPT_obj_try(SEXP MSEXP, SEXP idxSEXP, SEXP ndimSEXP, SEXP pSEXP, SEXP facSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type fac(facSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(obj_try(M, idx, ndim, p, fac, Z, y, u, v, tree));
    return rcpp_result_gen;
END_RCPP
}
// obj_min
arma::mat obj_min(const arma::rowvec& coef, const arma::mat& Z, const arma::vec& y, const arma::vec& u, const arma::vec& v, bool tree, int nrep, double ftol, int nfun_max);
RcppExport SEXP _NPT_obj_min(SEXP coefSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP treeSEXP, SEXP nrepSEXP, SEXP ftolSEXP, SEXP nfun_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< double >::type ftol(ftolSEXP);
    Rcpp::traits::input_parameter< int >::type nfun_max(nfun_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(obj_min(coef, Z, y, u, v, tree, nrep, ftol, nfun_max));
    return rcpp_result_gen;
END_RCPP
}
// sum_I
arma::vec sum_I(const arma::vec& y, const arma::vec& w);
RcppExport SEXP _NPT_sum_I(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_I(y, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NPT_bs_tree", (DL_FUNC) &_NPT_bs_tree, 1},
    {"_NPT_num_sum", (DL_FUNC) &_NPT_num_sum, 5},
    {"_NPT_den_sum", (DL_FUNC) &_NPT_den_sum, 3},
    {"_NPT_obj_fun", (DL_FUNC) &_NPT_obj_fun, 6},
    {"_NPT_rowvec_norm", (DL_FUNC) &_NPT_rowvec_norm, 2},
    {"_NPT_obj_try", (DL_FUNC) &_NPT_obj_try, 10},
    {"_NPT_obj_min", (DL_FUNC) &_NPT_obj_min, 9},
    {"_NPT_sum_I", (DL_FUNC) &_NPT_sum_I, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_NPT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
